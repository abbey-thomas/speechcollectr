% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matchServer.R
\name{matchServer}
\alias{matchServer}
\title{Matching Game Server Function}
\usage{
matchServer(
  id = "game",
  triggerInit,
  triggerReturn,
  startVal = 1,
  result = c("hide", "disable"),
  n2find,
  n_items = 24,
  n_cols = 4,
  items = "default",
  lab_type = c("icon", "text"),
  randomTarget = TRUE,
  randomGrid = FALSE,
  size = 2,
  color = "default",
  fill = "default"
)
}
\arguments{
\item{id}{The input ID associated with the matching game module. Must match the ID of \code{matchUI()}.}

\item{triggerInit}{The reactive expression that triggers the initial appearance of the matching game. Must be created with or wrapped in \code{reactive()}.}

\item{triggerReturn}{The reactive expression that triggers the reappearance of the matching game UI. Must be created with or wrapped in \code{reactive()}.}

\item{startVal}{Integer or reactive expression that returns an integer. Default = 1. The participant's trial number when entering the game for this session. Useful if the participant resumes a game from a previous session. If using a reactive expression, should be wrapped in \code{reactive()}.}

\item{result}{A character value describing what should happen when the participant finds a match. Must be either "disable" or "hide".}

\item{n2find}{Integer. How many items must the participant find in total?}

\item{n_items}{Integer. How many items should be displayed? Should be evenly divisible by \code{n_cols}}

\item{n_cols}{Integer. How many columns should the grid have?}

\item{items}{Character. A list of items (either Font Awesome icons) or words to use as labels for the buttons. Default select a random sample of length \code{n_items} from a list of 100 free Font Awesome icons. If not using "default", vector must be the same length as \code{n_items}.}

\item{lab_type}{Are the items text labels or icons? Must be either "text" or "icon"}

\item{randomTarget}{Boolean. Should the targets be selected from the list randomly (\code{TRUE}) or in a particular order (\code{FALSE})?}

\item{randomGrid}{Boolean. Should the grid of items be randomized for each participant?}

\item{size}{An integer between 1 and 3 indicating the size of the matching game buttons (larger = bigger)}

\item{color}{A single hex code or vector of hex codes indicating the color of the icons or text. Default is black.}

\item{fill}{A single hex code or vector of hex codes indicating the fill of the matching game buttons. Defaults to values from the "Bright" colorblind friendly palette from Paul Tol (see link in references below).}
}
\value{
A reactive list with 4 items: (1) score = the number of matches the participant has found so far, (2) i_df = a data.frame containing the list of items used in the present game and their order, (3) time_df: a data frame containing the start and stop times for each trial and the difference between the two in milliseconds, and (4) a reactive value indicating whether the participant's answer is correct (1) or incorrect (0).
}
\description{
Matching Game Server Function
}
\examples{
library(shiny)
library(shinyjs)

# For the sake of a short example, we'll only require 3 matches.
ui <- fluidPage(
  fluidRow(
    column(width = 8, offset = 2,
           actionButton("start", "Start"),
           hidden(actionButton("again", "Play Again")),
           matchUI(n2find = 3)
           )
  )
)

server <- function(input, output, session) {
  matches <- matchServer(triggerInit = reactive(input$start),
              triggerReturn = reactive(input$again),
              n2find = 3,
              randomGrid = TRUE,
              lab_type = "icon",
              result = "hide")

  observe({
    if (matches()$n_found > 0) {
      showElement("again")
    }
  })
}

shinyApp(ui = ui, server = server)

}
\references{
Paul Tol's colorblind-friendly palettes (the source of the default button colors) can be found at \url{https://personal.sron.nl/~pault/#sec:qualitative}.
}
\seealso{
Must be used with \code{\link{matchUI}}.
}
