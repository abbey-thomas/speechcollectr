% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/surveyServer.R
\name{surveyServer}
\alias{surveyServer}
\title{Server function for the survey module}
\usage{
surveyServer(
  id = "survey",
  questionFile,
  notListedLab = NULL,
  outFile = NULL,
  returnVals = NULL,
  trigger,
  result = c("clear", "hide")
)
}
\arguments{
\item{id}{The module id. Must be the same as \code{\link{surveyUI}}.}

\item{questionFile}{A valid file path to an existing CSV file, formatted according to the instructions in \code{\link{surveyPrep}}. Must be the same as the one used in \code{\link{surveyUI}}.}

\item{notListedLab}{For non-textInput questions, the name of the choice that will allow your participants to enter their own value for all questions that include this string in the 'options' column of \code{questionFile}. Must be the same as the one used in \code{\link{surveyUI}}.}

\item{outFile}{Name of rds or csv file to create with a participant's answers. Must be unique for each participant.}

\item{returnVals}{Vector of inputs to return as reactive values. Must be a subset of the input IDs from the id column of \code{questionFile}.}

\item{trigger}{A reactive value indicating the event that should trigger the appearance of the consent form. May be an \code{input$...} value from outside the module wrapped in \code{reactive()}.}

\item{result}{Action to perform when the particpant clicks the submit button. Must be one of 'clear' (to clear the form) or 'hide' (to hide all form UI elements).}
}
\value{
A CSV or RDS file containing the values input by the participant, and/or a list of reactive values specified by \code{returnVals}.
}
\description{
Server function for the survey module
}
\note{
This function returns a file every time the submit button is clicked. Therefore, the \code{outFile} argument should be unique for each run of the function. We recommend pasting a unique ID number (perhaps from a reactive value) to a prefix to save a separate file for each participant. Though this creates many small files, these files can easily be processed in bulk during analysis, which is less risky than opening and appending to existing files when multiple users visit the app simultaneously!
}
\examples{
library(shiny)
data("demographics")
write.csv(demographics, "demographics.csv", row.names = FALSE)
# If you use your own survey file, run surveyPrep() first!

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(width = 4,
                 textOutput("age")),
    mainPanel(width = 8,
              actionButton("begin", "Begin"),
              surveyUI(id = "survey",
                       title = "Background Information Survey",
                       questionFile = "demographics.csv",
                       notListedLab = "Not listed:")
    )
  )
)
server <- function(input, output, session) {
  answers <- surveyServer(id = "survey",
               questionFile = questionFile,
               notListedLab = "Not listed:",
               outFile = "sample.rds",
               trigger = reactive(input$begin),
               returnVals = c("age", "sex"),
               result = "clear")
  observeEvent(answers$age, {
    output$age <- renderText({paste0("You are ", answers$age, " years old.")})
  })
}
shinyApp(ui = ui, server = server)
}
\seealso{
\code{\link{surveyUI}}, \code{\link{surveyPrep}}
}
