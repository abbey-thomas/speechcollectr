% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recordServer.R
\name{recordServer}
\alias{recordServer}
\title{Server function for Recording User Audio}
\usage{
recordServer(
  id = "recorder",
  folder = ".",
  filename,
  eval = FALSE,
  tries = 2,
  onFail = "continue",
  snr_best = 15,
  snr_good = 5
)
}
\arguments{
\item{id}{The input ID associated with the record module. Must be the same as the id of \code{recordUI()}.}

\item{folder}{Character. Where to store the audio file. Defaults to the path returned by \code{getwd()}}

\item{filename}{Required. Character. The name of the file to be recorded. Do not specify a directory here. Instead, do that with the \code{folder} argument.}

\item{eval}{Boolean. Should we evaluate the recording for clipping and SNR, and give the user tips on how to improve if the recording quality is poor? Defaults to FALSE.}

\item{tries}{Integer. If eval=TRUE, how many tries should the user get to improve their SNR and reduce clipping?}

\item{onFail}{If eval=TRUE, what kind of message should the user receive if they try to record the maximum number of \code{tries} and the quality is still poor? Must be either "stop" (user gets an error message) or "continue" (user gets a success message and we ignore recording quality).}

\item{snr_best}{Integer. If eval=TRUE, what is the minimum SNR (dB) required for the recording to be considered of the best quality? Defaults to 15.}

\item{snr_good}{Integer. If eval=TRUE, what is the minimum SNR (dB) required for the recording to be considered acceptable? Must be less than \code{snr_best}. Defaults to 5.}
}
\value{
Saves a single-channel, 16-bit, 44.1 kHz sample rate WAV file with the specified \code{filename} in a directory specified by \code{folder}. If eval==TRUE, returns a pop-up telling the user how to improve their recording quality if it is not sufficient.
}
\description{
The server function for recording user audio enables the 'stop' button after the user begins recording and checks to make sure the user has given the website permission to record audio in their browser. Requires the UI \code{\link{recordUI}}.
}
\examples{
if (interactive()) {
ui <- shiny::fluidPage(
  recordUI(id = "record")
)

server <- function(input, output, session) {
 recordServer(id = "record", filename = "sample.wav")
}
shiny::shinyApp(ui = ui, server = server)
}

}
\seealso{
Must be used with \code{\link{recordUI}}.

Other Audio recording module: 
\code{\link{recordUI}()}
}
\concept{Audio recording module}
