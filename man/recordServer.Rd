% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recordServer.R
\name{recordServer}
\alias{recordServer}
\title{Server function for Recording User Audio}
\usage{
recordServer(
  id = "record",
  outFile,
  attempts = Inf,
  overwrite = FALSE,
  writtenStim = NULL,
  writtenDelay = 500
)
}
\arguments{
\item{id}{The input ID associated with the record module. Must be the same as the id of \code{recordUI()}.}

\item{outFile}{Character or reactive expression. Where to store the audio file. Can indicate any subdirectory of the present working directory. If dynamic, wrap in \code{reactive()}.}

\item{attempts}{Numeric (Defaults to Inf). How many attempts to create this recording should the participant be allowed?}

\item{writtenStim}{Either a character vector (for a single, static stimulus) or a reactive expression (created with reactive, for a stimulus that should be updated from trial to trial) representing a written stimulus that a participant will read while recording.}

\item{writtenDelay}{Integer. How many milliseconds should elapse between the time the participant clicks \code{record} and the time the written stimulus appears? Defaults to 500. We recommend not using a value less than that.}

\item{Overwrite}{Boolean. Defaults to \code{FALSE} so that a unique digit is appended to each filename so that all recordings will be saved even when the filename value is the same. If \code{TRUE}, will overwrite a file of the same name.}
}
\value{
Returns a reactive expression containing: (1) \code{n}: the number of attempts at recording the current file and (2) \code{file}: the filename where only the most recent attempt is saved (previous attempts have been overwritten). Also returns a wav file in a filename comprising \code{outPrefix} and a unique four digit number.
}
\description{
The server function for recording user audio enables the 'stop' button after the user begins recording and checks to make sure the user has given the website permission to record audio in their browser. Requires the UI \code{\link{recordUI}}.
}
\note{
Must be placed at the top level of the application's server function. The "start" and "stop" buttons from this module can be accessed in the server code with the "id" of the module as follows: \code{input[["id-start"]]} or \code{input[["id-stop"]]}. The submit button can be accessed with \code{input[["id-submit"]]}.
}
\examples{
if (interactive()) {
  library(shiny)
  library(shinyjs)

  # Build UI
  ui <- fluidPage(

    ## Get background javascript ready
    useShinyjs(),

    ## Setup page layout
    div(id = "trialDiv",
        style = "text-align:center;",
        actionButton("next_trial", "NEXT"),

        ### Initialize the recording interface invisibly
        hidden(recordUI(id = "rec_module"))
    )
  )

  # The Server function
  server <- function(input, output, session) {
    ## Create an object that will count trials
    rvs <- reactiveValues(trial_n = 0)

    ## When the participant clicks "NEXT"...
    observeEvent(input$next_trial, {
      ### Increase the trial number
      rvs$trial_n <- rvs$trial_n + 1

      ### Show the recording interface
      showElement("rec_module")

      ### Hide the next button
      hide("next_trial")
    })

    ## Note that the call to recordServer() is at the top level of our app's server function
    ## And the returned filename and text to be read are wrapped in reactive() (since they need to be reactive).
    recordServer(id = "rec_module",
                 attempts = 3, overwrite = TRUE,
                 outFile = reactive(paste0("www/rec", rvs$trial_n, ".wav")),
                 writtenStim = reactive(paste0("This is recording ", rvs$trial_n, ".")))

    ## As with all speechcollectr modules, the submit button's Id can be accessed with the module id + `-submit`
    ## Here when the user clicks submit inside the recording module...
    observeEvent(input[["rec_module-submit"]], {

      ## Make the next button reappear
      showElement("next_trial")
    })

  }
  # Run the application
  shinyApp(ui = ui, server = server)
}

}
\seealso{
Must be used with \code{\link{recordUI}}. For a more flexible audio recording protocol, see \code{\link{startRec}}, \code{\link{stopRec}}, and \code{\link{useRecorder}}.

Other Audio recording module: 
\code{\link{recordUI}()}
}
\concept{Audio recording module}
