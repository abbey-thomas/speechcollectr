% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/surveyUI.R
\name{surveyUI}
\alias{surveyUI}
\title{Create a User Interface for the survey module}
\usage{
surveyUI(
  id = "survey",
  questionFile,
  title = "Survey",
  subtitle = "Please answer the questions below. Questions marked with * are required.",
  requiredLab = "*",
  submitLab = "SUBMIT"
)
}
\arguments{
\item{id}{The module id. Must be the same as \code{\link{surveyServer}}.}

\item{questionFile}{A valid file path to an existing CSV file, formatted according to the instructions in \code{\link{surveyPrep}}. Must be the same as the one used in \code{\link{surveyServer}}.}

\item{title}{The title of the survey to display to participants.}

\item{subtitle}{The subtitle of the survey to display to participants.}

\item{requiredLab}{The value that will be appended to required questions' labels. Defaults to asterisk (*).}

\item{submitLab}{The label that should be displayed on the button participants will click to submit the form.}
}
\value{
A Shiny user interface with the questions specified in the \code{questionFile} CSV file.
}
\description{
Create a User Interface for the survey module
}
\details{
In a Shiny App, this should always be used with \code{\link{surveyServer}}. Before creating the app, be sure to format your \code{questionFile} according to the instructions in \code{\link{surveyPrep}}.
}
\examples{
library(shiny)
library(shinyjs)
data("demographics")
write.csv(demographics, "demographics.csv", row.names = FALSE)
# If you use your own survey file, run surveyPrep() first!

# You can use IDs specified in `returnVals` to trigger events after the survey is submitted.
if (interactive()) {
  ui <- fluidPage(
    useShinyjs(),
    sidebarLayout(
      sidebarPanel(width = 4,
                   textOutput("age")),
      mainPanel(width = 8,
                actionButton("begin", "Begin"),
                surveyUI(id = "survey",
                         title = "Background Information Survey",
                         questionFile = "demographics.csv",
                         notListedLab = "Not listed:")
      )
    )
  )

  server <- function(input, output, session) {
    observeEvent(input$begin, {
      hide("begin")
      # Show the survey when "begin" is clicked.
      answers <- surveyServer(id = "survey",
                              questionFile = "demographics.csv",
                              notListedLab = "Not listed:",
                              outFile = "sample.rds",
                              returnVals = c("age", "sex"),
                              result = "clear")

      # Once an answer for "age" is submitted, show the answer in the sidebar panel.
      observeEvent(answers$age, {
        output$age <- renderText({paste0("You are ", answers$age, " years old.")})
      })
    })
  }
  shinyApp(ui = ui, server = server)
}

# Or, you can trigger events on click of the survey's submit button
#  using the module id in the following string: `input[["id-submit"]]`
if (interactive()) {
  ui <- fluidPage(
    sidebarLayout(
      sidebarPanel(width = 4,
                   textOutput("age")),
      mainPanel(width = 8,
                actionButton("begin", "Begin"),
                surveyUI(id = "survey",
                         title = "Background Information Survey",
                         questionFile = "demographics.csv",
                         notListedLab = "Not listed:")
      )
    )
  )

  server <- function(input, output, session) {
    observeEvent(input$begin, {
      answers <- surveyServer(id = "survey",
                              questionFile = "demographics.csv",
                              notListedLab = "Not listed:",
                              outFile = "sample.rds",
                              returnVals = c("age", "sex"),
                              result = "hide")

      observeEvent(input[["survey-submit"]], {
        output$age <- renderText({paste0("You are ", answers$age, " years old.")})
      })
    })
  }
  shinyApp(ui = ui, server = server)
}
}
