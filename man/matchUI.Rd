% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matchUI.R
\name{matchUI}
\alias{matchUI}
\title{Matching Game User Interface}
\usage{
matchUI(
  id = "game",
  title = "Find a Match!",
 
    instructions = "Click a button in the grid below to see the image it is hiding. Keep clicking buttons until you find the image that matches the one above.",
  n2find
)
}
\arguments{
\item{id}{The input ID associated with the matching game module. Must match the ID of \code{matchServer()}.}

\item{title}{Character. The title that will be displayed at the top of the UI. Defaults to "Find a Match!"}

\item{instructions}{Character. The instructions that will be displayed above the grid of buttons. Defaults to general instructions for the matching game.}

\item{n2find}{The number of items a participant must find. Must be the same as \code{n2find} in \code{matchServer()}}
}
\value{
A minimal user interface for the matching game that includes a title, instructions, and a progress bar.
}
\description{
Matching Game User Interface
}
\examples{
library(shiny)
library(shinyjs)

ui <- fluidPage(
  fluidRow(
    column(width = 8, offset = 2,
           actionButton("start", "Start"),
           hidden(actionButton("again", "Play Again")),
           matchUI(n2find = 24)
           )
  )
)

server <- function(input, output, session) {
  counter <- reactiveValues(n = 1)
  matches <- matchServer(triggerInit = reactive(input$start),
              triggerReturn = reactive(input$again),
              counter = reactive(counter$n),
              n2find = 24,
              randomGrid = TRUE,
              lab_type = "icon",
              result = "hide")

  observe({
    if (matches$n_found() > 0) {
      showElement("again")
    }
  })

  observeEvent(input$again, {
    counter$n <- counter$n + 1
  })
}

shinyApp(ui = ui, server = server)

}
\seealso{
Must be used with \code{\link{matchServer}}.
}
