% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evalWavServer.R
\name{evalWavServer}
\alias{evalWavServer}
\title{Give feedback to participants on recording quality}
\usage{
evalWavServer(
  wave,
  counter,
  min_sf = 44100,
  snr_best = 15,
  snr_good = 5,
  max_clip = 0.01,
  tries = 3,
  onFail = "continue"
)
}
\arguments{
\item{wave}{Required. Either a \code{tuneR::Wave} object or a valid file path to an existing wav file.}

\item{counter}{Required. A reactive value that tells this function how many tries a participant has had so far.}

\item{min_sf}{What is the minimum sample rate (in Hz) that you will allow for the recording? If a user's browser will not allow audio recording at this high of a sample rate, the user will get an error message. Set to 0 if you do not want to exclude participants who record at low sampling rates.}

\item{snr_best}{Integer. If eval=TRUE, what is the minimum SNR (dB) required for the recording to be considered of the best quality? Defaults to 15.}

\item{snr_good}{Integer. If eval=TRUE, what is the minimum SNR (dB) required for the recording to be considered acceptable? Must be less than \code{snr_best}. Defaults to 5.}

\item{max_clip}{Numeric. What proportion of the frames can be clipped and the recording still be acceptable? Defaults to .01.}

\item{tries}{Integer. How many tries should the user get to create a quality recording?}

\item{onFail}{If eval=TRUE, what kind of message should the user receive if they try to record the maximum number of \code{tries} and the quality is still poor? Must be either "stop" (user gets an error message) or "continue" (user gets a success message and we ignore recording quality).}
}
\value{
A boolean value indicating success (=1) or failure (=0) to produce a quality recording.
}
\description{
Give feedback to participants on recording quality
}
\examples{
if (interactive()) {
ui <- shiny::fluidPage(
  shiny::actionButton("go", "GO"),
  recordUI(id = "record")
)

server <- function(input, output, session) {
 rvs <- shiny::reactiveValues(n=0)

 rvs$rec <- recordServer(id = "record",
                         trigger = reactive(input$go),
                         filename = "sample.wav")
 observe({
   shiny::req(rvs$rec)
   rvs$result <- evalWavServer(wave = "sample.wav",
                               counter = rvs$n)
 })

 observe({
   shiny::req(rvs$result)
   shinyjs::delay(500, {rvs$result <- NULL})
   shinyjs::delay(500, {rvs$rec <- NULL})
 })
}
shiny::shinyApp(ui = ui, server = server)
}

}
